# -*- coding: utf-8 -*-
"""Spam_Countvec_and_TFIDF

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11zk6NeeYLSQjuMh_ETaWjSS4Zh1SKm23
"""

#import all the libraries
import spacy
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,confusion_matrix
from sklearn.linear_model import LogisticRegression
import pandas as pd
import numpy as np

df = pd.read_csv("/content/SMSSpamCollection", sep='\t', header=None, names=['type', 'text'])
df.head()

df = df[['text','type']]

df.head()

df.dtypes

df.isna().sum()

countvec = CountVectorizer(stop_words='english',strip_accents='unicode',max_features=1000)

convert = countvec.fit_transform(df.text)

X_train = convert.toarray()
X_train

X = convert.toarray()
y = df['type'] # Define y here as well
X_train_count,X_test_count,y_train_count,y_test_count = train_test_split(X,y,test_size=0.2,random_state=42)

y_train = df.type.values
y_train

lg = LogisticRegression()

lg.fit(X_train,y_train)

# Evaluate the CountVectorizer model
accuracy_count = lg_count.score(X_test_count, y_test_count)
print(f"Accuracy with CountVectorizer: {accuracy_count}")

X = convert.toarray()
y = df['type']
X_train_count, X_test_count, y_train_count, y_test_count = train_test_split(X, y, test_size=0.2, random_state=42)

lg.score(X_train,y_train)

test_message = ["Customer service annoncement. You have a New Years delivery waiting for you. Please call 07046744435 now to arrange delivery"]

test_convert = countvec.transform(test_message)

lg.predict(test_convert)

msg = ["Sorry, I'll call later in meeting."]

lg.predict(countvec.transform(msg))

# Initialize TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english', strip_accents='unicode')

# Transform text data
X_tfidf = tfidf_vectorizer.fit_transform(df['text'])

# Train a Logistic Regression model
lg_tfidf = LogisticRegression()
lg_tfidf.fit(X_train_tfidf, y_train)

y = df['type']
X_train_tfidf, X_test_tfidf, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

df